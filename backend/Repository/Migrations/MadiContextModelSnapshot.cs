// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(MadiContext))]
    partial class MadiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Repository.AirLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("airline");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Flight")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("TestTable_pkey");

                    b.ToTable("AirLine", (string)null);
                });

            modelBuilder.Entity("Repository.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SubTypeTicket")
                        .HasColumnType("integer")
                        .HasColumnName("sub_type_ticket");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket");

                    b.Property<int>("TypeTicket")
                        .HasColumnType("integer")
                        .HasColumnName("type_ticket");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("applications_pkey");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("Repository.FailedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("failed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("failed_jobs_pkey");

                    b.HasIndex(new[] { "Uuid" }, "failed_jobs_uuid_unique")
                        .IsUnique();

                    b.ToTable("failed_jobs", (string)null);
                });

            modelBuilder.Entity("Repository.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationsId")
                        .HasColumnType("bigint")
                        .HasColumnName("applications_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("files_pkey");

                    b.HasIndex("ApplicationsId");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Repository.FormAbi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Agree")
                        .HasColumnType("boolean")
                        .HasColumnName("agree");

                    b.Property<bool>("Courses")
                        .HasColumnType("boolean")
                        .HasColumnName("courses");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EduState")
                        .HasColumnType("integer")
                        .HasColumnName("eduState");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<int?>("Gomadi")
                        .HasColumnType("integer")
                        .HasColumnName("gomadi");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("patronymic");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint")
                        .HasColumnName("phone");

                    b.Property<bool>("Subscribe")
                        .HasColumnType("boolean")
                        .HasColumnName("subscribe");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("form_abi_pkey");

                    b.ToTable("form_abi", (string)null);
                });

            modelBuilder.Entity("Repository.MigrationLaravel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Batch")
                        .HasColumnType("integer")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id")
                        .HasName("migrations_pkey");

                    b.ToTable("migrations", (string)null);
                });

            modelBuilder.Entity("Repository.Models.FileRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("FileRepos");
                });

            modelBuilder.Entity("Repository.PasswordReset", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.HasIndex(new[] { "Email" }, "password_resets_email_index");

                    b.ToTable("password_resets", (string)null);
                });

            modelBuilder.Entity("Repository.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("permissions_pkey");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Repository.PersonalAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abilities")
                        .HasColumnType("text")
                        .HasColumnName("abilities");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("token");

                    b.Property<long>("TokenableId")
                        .HasColumnType("bigint")
                        .HasColumnName("tokenable_id");

                    b.Property<string>("TokenableType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tokenable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("personal_access_tokens_pkey");

                    b.HasIndex(new[] { "Token" }, "personal_access_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "TokenableType", "TokenableId" }, "personal_access_tokens_tokenable_type_tokenable_id_index");

                    b.ToTable("personal_access_tokens", (string)null);
                });

            modelBuilder.Entity("Repository.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Repository.SubTypeTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sub_type_ticket_pkey");

                    b.ToTable("sub_type_ticket", (string)null);
                });

            modelBuilder.Entity("Repository.TypeTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("type_ticket_pkey");

                    b.ToTable("type_ticket", (string)null);
                });

            modelBuilder.Entity("Repository.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("MicrosoftId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("microsoft_id");

                    b.Property<string>("MicrosoftToken")
                        .HasColumnType("text")
                        .HasColumnName("microsoft_token");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("remember_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RolesPermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("roles_permissions_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("roles_permissions", (string)null);
                });

            modelBuilder.Entity("UsersPermission", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("UserId", "PermissionId")
                        .HasName("users_permissions_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("users_permissions", (string)null);
                });

            modelBuilder.Entity("UsersRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("users_roles_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("users_roles", (string)null);
                });

            modelBuilder.Entity("Repository.File", b =>
                {
                    b.HasOne("Repository.Application", "Applications")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("files_applications_id_foreign");

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("RolesPermission", b =>
                {
                    b.HasOne("Repository.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("roles_permissions_permission_id_foreign");

                    b.HasOne("Repository.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("roles_permissions_role_id_foreign");
                });

            modelBuilder.Entity("UsersPermission", b =>
                {
                    b.HasOne("Repository.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_permissions_permission_id_foreign");

                    b.HasOne("Repository.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_permissions_user_id_foreign");
                });

            modelBuilder.Entity("UsersRole", b =>
                {
                    b.HasOne("Repository.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_roles_role_id_foreign");

                    b.HasOne("Repository.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("users_roles_user_id_foreign");
                });

            modelBuilder.Entity("Repository.Application", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
